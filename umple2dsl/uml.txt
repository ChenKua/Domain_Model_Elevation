
class SmartHome
{
    String address;
    * house <@>- 1 Room roomInHouse;
    
}

class SmartHomeAutomationSystem
{
    1 application <@>- 0..* User appUser ;
    1 application <@>- 0..* Device appDevice ;
    1 application <@>- 0..* SmartHome appHome ;
    1 application <@>- 0..* AutomationRule appRule ;
    1 application <@>- 0..* Alert appAlert;
    1 application <@>- 0..* SensorReading appReading ;
    1 application <@>- 0..* ControlCommand appCommand ;
   1 application <@>- 0..* ActivityLog log ;

}

class Room
{
  int roomNumber;
  int roomArea;

   * room -- 0..* User residentInRoom;
}

class SensorDevice
{
    isA Device;
TypeOfSensor sensorType;
  1 sensor -- * SensorReading result;
}


class Actuator
{
  TypeOfController controllerType;
isA Device;
  1 remote -- * ControlCommand command;
}

class Device
{
  int id;
  Boolean isActivated;
  0..8 device -- 1 Room controlledRoom;
}



class SensorReading
{
  int measuredValue;
  Date timeStamp;
  * readings -- * User reader;
}

class ControlCommand
{
  Date timeStamp;
  commandStatus status;
    * commands -- * User userForCommand;
}

class ActivityLog
{
  1 sensorRecord <@>- 0..* SensorReading ;
  1 sensorRecord <@>- 0..* ControlCommand ;
}

enum typeOfSensor {temperature, movement, light, lock}
enum typeOfController {temperature, movement, light, lock}
enum commandStatus {requested, completed, failed}

class AutomationRule
{
  Boolean isActive;
  Date timeStamp;
  * ruleInRoom -- * Room roomForRule;
  * ruleInDevice-- * Device deviceForRule;
  * ruleInCommand -- * ControlCommand controlForRule;
  * ruleInSensor -- * SensorReading sensorForRule;
  }

class Alert
{
  text;
  * alertDeclaration-- 1 Owner mainResident;
  * alertTrigger -- * AutomationRule triggeringRule;
}

class Owner
{
  isA Role;
    0..1 houseOwner -- 0..1 SmartHome home;
singleton;
  }

class Role
{
     
0..1 role -- 0..1 User person;
abstract;
}

class User
{
  name;
}



class Resident
{
  isA Role;
}

